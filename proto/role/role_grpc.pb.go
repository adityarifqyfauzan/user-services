// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/role/role.proto

package role

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleServicesClient is the client API for RoleServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServicesClient interface {
	Create(ctx context.Context, in *RoleCreateRequest, opts ...grpc.CallOption) (*Role, error)
	FindAll(ctx context.Context, in *RoleFindAllRequest, opts ...grpc.CallOption) (*Roles, error)
}

type roleServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServicesClient(cc grpc.ClientConnInterface) RoleServicesClient {
	return &roleServicesClient{cc}
}

func (c *roleServicesClient) Create(ctx context.Context, in *RoleCreateRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/role.RoleServices/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServicesClient) FindAll(ctx context.Context, in *RoleFindAllRequest, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/role.RoleServices/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServicesServer is the server API for RoleServices service.
// All implementations must embed UnimplementedRoleServicesServer
// for forward compatibility
type RoleServicesServer interface {
	Create(context.Context, *RoleCreateRequest) (*Role, error)
	FindAll(context.Context, *RoleFindAllRequest) (*Roles, error)
	mustEmbedUnimplementedRoleServicesServer()
}

// UnimplementedRoleServicesServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServicesServer struct {
}

func (UnimplementedRoleServicesServer) Create(context.Context, *RoleCreateRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoleServicesServer) FindAll(context.Context, *RoleFindAllRequest) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedRoleServicesServer) mustEmbedUnimplementedRoleServicesServer() {}

// UnsafeRoleServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServicesServer will
// result in compilation errors.
type UnsafeRoleServicesServer interface {
	mustEmbedUnimplementedRoleServicesServer()
}

func RegisterRoleServicesServer(s grpc.ServiceRegistrar, srv RoleServicesServer) {
	s.RegisterService(&RoleServices_ServiceDesc, srv)
}

func _RoleServices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.RoleServices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServicesServer).Create(ctx, req.(*RoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServices_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleFindAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServicesServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.RoleServices/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServicesServer).FindAll(ctx, req.(*RoleFindAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleServices_ServiceDesc is the grpc.ServiceDesc for RoleServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role.RoleServices",
	HandlerType: (*RoleServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoleServices_Create_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _RoleServices_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/role/role.proto",
}
